------------Map.h------------------
	  void getValidMap();
	  void getBrokenMap();
	  void getBrokenMap2();
	  void getBrokenMap3(); //all of these assign to the map object
	  
	  bool isCountriesAssignedToContinents();
	 


------------Map.cpp-----------------

  void Map::getValidMap(){
  //Create Continents
	Continent* contA = new Continent("Left", 1);
	Continent* contB = new Continent("Right", 4);
	//Create Countries
	Country* a = new Country("a", contA);
	Country* b = new Country("b", contB);
	Country* c = new Country("c", contB);
	Country* d = new Country("d", contB);
	Country* e = new Country("e", contB);
	//Link Countries/Continents
	a->addNeighbor(b);
	c->addNeighbor(b);
	d->addNeighbor(b);
	e->addNeighbor(b);
	//Add Continents/Countries to Map
	addCountry(a);
	addCountry(b);
	addCountry(c);
	addCountry(d);
	addCountry(e);
	addContinent(contA);
	addContinent(contB);
  
  }
  
  void Map::getBrokenMap(){
  //checks if can attain each country in map=false
  //Create Continents
	Continent* contA = new Continent("Left", 1);
	Continent* contB = new Continent("Right", 4);
	//Create Countries
	Country* a = new Country("a", contA);
	Country* b = new Country("b", contB);
	Country* c = new Country("c", contB);
	Country* d = new Country("d", contB);
	Country* e = new Country("e", contB);
	//Link Countries/Continents
	a->addNeighbor(b);
	//c->addNeighbor(b);
	d->addNeighbor(b);
	e->addNeighbor(b);
	//Add Continents/Countries to Map
	addCountry(a);
	addCountry(b);
	addCountry(c);
	addCountry(d);
	addCountry(e);
	addContinent(contA);
	addContinent(contB);
  
  }
  
  void Map::getBrokenMap2(){
  //checks if each country has continent=false
  //Create Continents
	Continent* contA = new Continent("Left", 1);
	Continent* contB = new Continent("Right", 4);
	//Create Countries
	Country* a = new Country("a", contA);
	Country* b = new Country("b", contB);
	Country* c = new Country("c", NULL);//notice the null: does not belong to continent
	Country* d = new Country("d", NULL);
	Country* e = new Country("e", contB);
	//Link Countries/Continents
	a->addNeighbor(b);
	c->addNeighbor(b);
	d->addNeighbor(b);
	e->addNeighbor(b);
	//Add Continents/Countries to Map
	addCountry(a);
	addCountry(b);
	addCountry(c);
	addCountry(d);
	addCountry(e);
	addContinent(contA);
	addContinent(contB);
  
  }
  
  void Map::getBrokenMap3(){
  //to know if the program recognizes that contA is not a connected subgraph
  //Create Continents
	Continent* contA = new Continent("Left", 1);
	Continent* contB = new Continent("Right", 4);
	//Create Countries
	Country* a = new Country("a", contA);
	Country* b = new Country("b", contB);
	Country* c = new Country("c", contB);
	Country* d = new Country("d", contB);
	Country* e = new Country("e", contB);
	Country* f = new Country("f", contA);
	//Link Countries/Continents
	a->addNeighbor(b);
	c->addNeighbor(b);
	d->addNeighbor(b);
	e->addNeighbor(b);
	f->addNeighbor(e);
	//Add Continents/Countries to Map
	addCountry(a);
	addCountry(b);
	addCountry(c);
	addCountry(d);
	addCountry(e);
	addCountry(f);
	addContinent(contA);
	addContinent(contB);
  
  }


  bool Map::isCountriesAssignedToContinent(){
  		for (int i=0;i<countryList.size();i++){
  			if(country[i]->getContinent()==NULL)
  				return false;
  		}
  		return true;
  }


------------------Main_1.cpp-------------

int main() {
	Map* validMap = new Map();
	validMap->getValidMap();

	std::cout<<"A valid map"<<std::endl;

	bool isCountriesAssignedToContinent = validMap->isCountriesAssignedToContinent();
	std::cout<<"Are all countries assigned to a continent? "
		<<(isCountriesAssignedToContinent? true:false) <<std::endl;

	std::cout<<"All countries can only be assigned one continent and it cannot be changed"<<
		"once it has been set because there is no mutator method for the continent."<<std::endl;

	bool isMapConnected_ContinentConnected = validMap->validate();
	std::cout<<"Is the map a connected graph and does each continent a connected subgraph?"<<
	(isMapConnected_ContinentConnected? true:false)<<std::endl;

	Map* brokenMapOne = new Map();
	brokenMapOne->getBrokenMap();

	std::cout<<"A broken map"<<std::endl;

	bool isCountriesAssignedToContinent = brokenMap->isCountriesAssignedToContinent();
	std::cout<<"Are all countries assigned to a continent? "
		<<(isCountriesAssignedToContinent? true:false) <<std::endl;

	std::cout<<"All countries can only be assigned one continent and it cannot be changed"<<
		"once it has been set because there is no mutator method for the continent."<<std::endl;

	bool isMapConnected_ContinentConnected = brokenMap->validate();
	std::cout<<"Is the map a connected graph and does each continent a connected subgraph?"<<
	(isMapConnected_ContinentConnected? true:false)<<std::endl;

	Map* brokenMapTwo = new Map();
	brokenMapTwo->getBrokenMap2();

	std::cout<<"A broken map"<<std::endl;

	bool isCountriesAssignedToContinent = brokenMapTwo->isCountriesAssignedToContinent();
	std::cout<<"Are all countries assigned to a continent? "
		<<(isCountriesAssignedToContinent? true:false) <<std::endl;

	std::cout<<"All countries can only be assigned one continent and it cannot be changed"<<
		"once it has been set because there is no mutator method for the continent."<<std::endl;

	bool isMapConnected_ContinentConnected = brokenMapTwo->validate();
	std::cout<<"Is the map a connected graph and does each continent a connected subgraph?"<<
	(isMapConnected_ContinentConnected? true:false)<<std::endl;

	Map* brokenMapThree = new Map();
	brokenMapThree->getBrokenMap3();

	std::cout<<"A broken map"<<std::endl;

	bool isCountriesAssignedToContinent = brokenMapThree->isCountriesAssignedToContinent();
	std::cout<<"Are all countries assigned to a continent? "
		<<(isCountriesAssignedToContinent? true:false) <<std::endl;

	std::cout<<"All countries can only be assigned one continent and it cannot be changed"<<
		"once it has been set because there is no mutator method for the continent."<<std::endl;

	bool isMapConnected_ContinentConnected = brokenMapThree->validate();
	std::cout<<"Is the map a connected graph and does each continent a connected subgraph?"<<
	(isMapConnected_ContinentConnected? true:false)<<std::endl;

}
